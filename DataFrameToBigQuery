from google.cloud import bigquery
import pandas as pd
import logging

logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(message)s')

class DataFrameToBigQuery:
    def __init__(self, project_id, dataset_id, table_id):
        self.project_id = project_id
        self.dataset_id = dataset_id
        self.table_id = table_id
        self.client = bigquery.Client(project=self.project_id)
        self.table_ref = self.client.dataset(self.dataset_id).table(self.table_id)
        self.table = self.client.get_table(self.table_ref)


    def adjust_dataframe_columns(self, dataframe):
        bq_fields_count = len(self.table.schema)
        if len(dataframe.columns) > bq_fields_count:
            dataframe = dataframe.iloc[:, :bq_fields_count]
            logging.warning(f"El DataFrame se ha ajustado a {bq_fields_count} columnas para coincidir con la tabla de destino en BigQuery.")
        return dataframe


    def modify_data_types_and_rename_columns(self, dataframe):
        schema = self.table.schema
        column_mapping = {dataframe.columns[i]: field.name for i, field in enumerate(schema) if i < len(dataframe.columns)}
        modified_df = dataframe.rename(columns=column_mapping)
        for field in schema:
            if field.name in modified_df.columns:
                if field.field_type == 'STRING':
                    modified_df[field.name] = modified_df[field.name].astype(str)
                elif field.field_type == 'INTEGER':
                    modified_df[field.name] = pd.to_numeric(modified_df[field.name], errors='coerce').fillna(0).astype(int)
                elif field.field_type == 'FLOAT':
                    modified_df[field.name] = pd.to_numeric(modified_df[field.name], errors='coerce').fillna(0.0)
                elif field.field_type == 'BOOLEAN':
                    modified_df[field.name] = modified_df[field.name].astype(bool)
        return modified_df


    def append_to_table(self, dataframe):
        dataframe = self.adjust_dataframe_columns(dataframe)
        dataframe = self.modify_data_types_and_rename_columns(dataframe)
        job = self.client.load_table_from_dataframe(dataframe, self.table_ref, job_config=bigquery.LoadJobConfig(write_disposition="WRITE_APPEND"))
        job.result()  # Espera a que la carga se complete
        logging.info(f"Se han cargado {job.output_rows} filas a {self.dataset_id}.{self.table_id}.")
